/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.driverallot.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.driverallot.domain.DriverAllot;
import org.optaplanner.examples.driverallot.domain.Driver;
import org.optaplanner.examples.driverallot.domain.RouteTrip;
import org.optaplanner.examples.driverallot.domain.solver.RouteTripConflict;
import org.optaplanner.examples.driverallot.domain.solver.RouteTripDistance;
import org.optaplanner.examples.driverallot.domain.solver.DriverRouteTripDistance;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "driverTimeMatches"
	when
		$driver : Driver($timeIn : timeIn, $timeOut : timeOut)
		RouteTrip(
			driver == $driver && 
			$timeStart : timeStart &&
			$timeEnd : timeEnd &&
			(
				timeStart < $timeIn || 
				timeEnd > $timeOut
			)
		)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -5);
end

rule "oneTripAtATime"
	when
		$routeTripConflict : RouteTripConflict(
			$leftRouteTripId : leftRouteTrip.id,
			$rightRouteTripId : rightRouteTrip.id
			//$leftRouteTripDriver : leftRouteTrip.driver,
			//$rightRouteTripDriver : rightRouteTrip.driver
		)
		$leftRouteTrip : RouteTrip(
			id == $leftRouteTripId,
			driver != null,
			$leftRouteTripDriver : driver
		)
		$rightRouteTrip : RouteTrip(
			id == $rightRouteTripId,
			driver != null,
			driver == $leftRouteTripDriver,
			driver.id != 0
		)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -5);
end

rule "enoughTimeBetweenTrips"
	when
		$routeTrip : RouteTrip(
			previousTrip != null,
			$previousTrip : previousTrip
		)
		$routeTripDistance : RouteTripDistance (
			leftRouteTrip == $previousTrip,
			rightRouteTrip == $routeTrip,
			possibleToAttendBoth == false
		)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -5);
end

// ############################################################################
// Soft constraints
// ############################################################################


rule "driverRankHigh"
	when
		$driver : Driver($rank : rank)
        RouteTrip($driver == driver)
		//exists RouteTrip(driver == $driver)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $rank);
end

rule "routeRankHigh"
	when
		$driver : Driver(
			id != 0,
			$driverRank : rank
		)
        $routeTrip : RouteTrip(
			driver == $driver,
			$routeRank : rank
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, - ($routeRank * $driverRank));
end

rule "firstTripDriverProximity"
	when
		$routeTrip : RouteTrip(
			$driver : driver,
			previousTrip == null
		)
		$driverRouteTripDistance : DriverRouteTripDistance (
			driver == $driver,
			routeTrip == $routeTrip,
			$distanceToStartInMeters : distanceToStart//InMeters
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -(int)$distanceToStartInMeters);
end

rule "twoTripsStartEndProximity"
	when
		$routeTrip : RouteTrip(
			previousTrip != null,
			$previousTrip : previousTrip/*,
			$routeTripStartLatitude : startLatitude,
			$routeTripStartLongitude : startLongitude,
			$previousRouteTripEndLatitude : previousTrip.endLatitude,
			$previousRouteTripEndLongitude : previousTrip.endLongitude*/
		)
		$routeTripDistance : RouteTripDistance (
			leftRouteTrip == $previousTrip,
			rightRouteTrip == $routeTrip,
			$distanceInMeters : distance//InMeters
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -(int)$distanceInMeters);
end

rule "lastTripDriverProximity"
	when
		$routeTrip : RouteTrip(
			$driver : driver,
			nextTrip == null
		)
		$driverRouteTripDistance : DriverRouteTripDistance (
			driver == $driver,
			routeTrip == $routeTrip,
			$distanceToEndInMeters : distanceToEnd//InMeters
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -(int)$distanceToEndInMeters);
end

rule "twoTripsStartEndTimeProximity"
	when
		$routeTrip : RouteTrip(
			previousTrip != null,
			$previousTrip : previousTrip,
			$routeTripStartTime : timeStart,
			$previousRouteTripEndTime : previousTrip.timeEnd
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -($routeTripStartTime - $previousRouteTripEndTime)/(60*10));
end